#
# Set a default target if one is not set. If override-target is set,
# then the target will become override-target and a warning is printed
# if the assigned TARGET was different.
#
ifneq ($(strip $(override-target)),)
override TARGET=$(override-target)
endif

#
# If TARGET is not set, default to a Unix target based on host type
#
ifndef TARGET
 uname := $(shell uname -s)
 ifeq ($(filter-out Linux Darwin,$(uname)),)
  ifeq ($(shell uname -m),x86_64)
   TARGET=unix-linux-64
  else
   TARGET=unix-linux
  endif
 endif
 ifeq ($(uname),SunOS)
  TARGET=unix-solaris
 endif
 ifeq ($(uname),NetBSD)
  TARGET=unix-netbsd
 endif
 ifndef	TARGET
  $(error Cannot determine TARGET in Make.config, uname = $(uname))
 endif
endif

export TARGET


#
# Set up the target name, and the target base variables.
#
# target = The full name of the target such as vxworks-bmw
# targetbase = 1st part of target (e.g. vxworks)
# targetplat = 2nd part of target (e.g. x86) if any; otherwise same as 1st
#
target     = ${TARGET}
targetsplt = $(subst -, , ${target})	# change hyphens to spaces
targetbase = $(word 1,${targetsplt})
targetplat = $(subst ${targetbase}-,,${TARGET})
#targetplat = $(lastword ,${targetsplt})

CFGFLAGS += -DBCM_HIDE_DISPATCHABLE


OUT_DIR := $(KERNEL_ROOT_DIR)/work
TARGET_BOARD_PLAT := ${TARGET}
IMGDIR := $(OUT_DIR)/$(TARGET_BOARD_PLAT)/image
CONFDIR = $(KERNEL_ROOT_DIR)/configs

BOOTLOADER_SRCDIR := $(KERNEL_ROOT_DIR)/bootloader/freedom-u540-c000-bootloader

OPENSBI_SRCDIR := $(KERNEL_ROOT_DIR)/bootloader/opensbi
OPENSBI_WRKDIR := $(OUT_DIR)/$(TARGET_BOARD_PLAT)/opensbi

UBOOT_SRCDIR := $(KERNEL_ROOT_DIR)/bootloader/uboot/$(UBOOT_SRC_VERSION)
UBOOT_WRKDIR := $(OUT_DIR)/$(TARGET_BOARD_PLAT)/uboot

LINUX_SRCDIR := $(KERNEL_ROOT_DIR)/kernel/$(KERNEL_SRC_VERSION)
LINUX_WRKDIR := $(OUT_DIR)/$(TARGET_BOARD_PLAT)/linux

BUSYBOX_SRCDIR := $(KERNEL_ROOT_DIR)/rootfs/busybox
BUSYBOX_WRKDIR := $(OUT_DIR)/$(TARGET_BOARD_PLAT)/busybox

ROOTFS_WRKDIR := $(IMGDIR)/rootfs

QEMU_FSTAB_EXT := $(CONFDIR)/qemu/fstab_ext
QEMU_ROOT := $(KERNEL_ROOT_DIR)/rootfs/root_qemu
QEMU_SRC := $(CONFDIR)/qemu/Makefile.qemu

# package work
PACKAGE_WRKDIR := $(IMGDIR)/package

#
# THIS FILE SHOULD NOT BE MODIFIED LOCALLY, to override, add a file
# $SDK/make/Make.local that sets your local settings, and/or provide
# a path to your settings using the MAKE_LOCAL variable.  If 
# either of these files exists, their values will override those in this makefile.
#
ifdef MAKE_LOCAL
include        ${MAKE_LOCAL}
else
-include	${KERNEL_ROOT_DIR}/buildroot/make/Make.local
endif



#
# Check for incompatible reload options
#

ifneq (,$(findstring -DBCM_WARM_BOOT_SUPPORT,$(CFGFLAGS)))
ifneq (,$(findstring -DBCM_EASY_RELOAD_SUPPORT,$(CFGFLAGS)))
 $(error "BCM_WARM_BOOT_SUPPORT and BCM_EASY_RELOAD_SUPPORT should not be enabled at the same time")
endif
endif

#
# By default, turn off the "changing directory" message.
#

MAKEFLAGS += --no-print-directory

#
# Use gmake by default
#

include ${KERNEL_ROOT_DIR}/buildroot/make/Make.tools
include ${KERNEL_ROOT_DIR}/buildroot/make/Make.clangtools
include	${KERNEL_ROOT_DIR}/buildroot/make/Makefile.${target}

# For make v3.80, eval function can't be placed inside any ifxxx-endif section
# The bug is fixed in v3.81
eval_fixed_ver := 3.81
eval_fixed := $(filter $(eval_fixed_ver),$(firstword $(sort $(MAKE_VERSION) $(eval_fixed_ver))))

# See Make.local (Make.local.template) to configure chip support



# Include board make rules if present
-include ${KERNEL_ROOT_DIR}/buildroot/make/Make.boards

# rootfs  extfs  size
ROOTSIZE := 500M
EXTSIZE := 500M

